local M = {}
local icons = {
    use_icons = true,
    kind = {
        Array = "",
        Boolean = "",
        Class = "",
        Color = "",
        Constant = "",
        Constructor = "",
        Enum = "",
        EnumMember = "",
        Event = "",
        Field = "",
        File = "",
        Folder = "󰉋",
        Function = "",
        Interface = "",
        Key = "",
        Keyword = "",
        Method = "",
        Module = "",
        Namespace = "",
        Null = "󰟢",
        Number = "",
        Object = "",
        Operator = "",
        Package = "",
        Property = "",
        Reference = "",
        Snippet = "",
        String = "",
        Struct = "",
        Text = "",
        TypeParameter = "",
        Unit = "",
        Value = "",
        Variable = "",
    },
    git = {
        LineAdded = "",
        LineModified = "",
        LineRemoved = "",
        FileDeleted = "",
        FileIgnored = "◌",
        FileRenamed = "",
        FileStaged = "S",
        FileUnmerged = "",
        FileUnstaged = "",
        FileUntracked = "U",
        Diff = "",
        Repo = "",
        Octoface = "",
        Branch = "",
    },
    ui = {
        ArrowCircleDown = "",
        ArrowCircleLeft = "",
        ArrowCircleRight = "",
        ArrowCircleUp = "",
        BoldArrowDown = "",
        BoldArrowLeft = "",
        BoldArrowRight = "",
        BoldArrowUp = "",
        BoldClose = "",
        BoldDividerLeft = "",
        BoldDividerRight = "",
        BoldLineLeft = "▎",
        BookMark = "",
        BoxChecked = "",
        Bug = "",
        Stacks = "",
        Scopes = "",
        Watches = "󰂥",
        DebugConsole = "",
        Calendar = "",
        Check = "",
        ChevronRight = ">",
        ChevronShortDown = "",
        ChevronShortLeft = "",
        ChevronShortRight = "",
        ChevronShortUp = "",
        Circle = "",
        Close = "󰅖",
        CloudDownload = "",
        Code = "",
        Comment = "",
        Dashboard = "",
        DividerLeft = "",
        DividerRight = "",
        DoubleChevronRight = "»",
        Ellipsis = "",
        EmptyFolder = "",
        EmptyFolderOpen = "",
        File = "",
        FileSymlink = "",
        Files = "",
        FindFile = "󰈞",
        FindText = "󰊄",
        Fire = "",
        Folder = "󰉋",
        FolderOpen = "",
        FolderSymlink = "",
        Forward = "",
        Gear = "",
        History = "",
        Lightbulb = "",
        LineLeft = "▏",
        LineMiddle = "│",
        List = "",
        Lock = "",
        NewFile = "",
        Note = "",
        Package = "",
        Pencil = "󰏫",
        Plus = "",
        Project = "",
        Search = "",
        SignIn = "",
        SignOut = "",
        Tab = "󰌒",
        Table = "",
        Target = "󰀘",
        Telescope = "",
        Text = "",
        Tree = "",
        Triangle = "󰐊",
        TriangleShortArrowDown = "",
        TriangleShortArrowLeft = "",
        TriangleShortArrowRight = "",
        TriangleShortArrowUp = "",
    },
    diagnostics = {
        BoldError = "",
        Error = "",
        BoldWarning = "",
        Warning = "",
        BoldInformation = "",
        Information = "",
        BoldQuestion = "",
        Question = "",
        BoldHint = "",
        Hint = "󰌶",
        Debug = "",
        Trace = "✎",
    },
    misc = {
        Robot = "󰚩",
        Squirrel = "",
        Tag = "",
        Watch = "",
        Smiley = "",
        Package = "",
        CircuitBoard = "",
    },
}

local function my_on_attach(bufnr)
    local api = require "nvim-tree.api"

    local function opts(desc)
        return { desc = "nvim-tree:" .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
    end

    -- vim.bo[bufnr].modifiable = true
    api.config.mappings.default_on_attach(bufnr)
    local useful_keys = {
        ["l"] = { api.node.open.edit, opts "Open" },
        ["o"] = { api.node.open.edit, opts "Open" },
        ["<CR>"] = { api.node.open.edit, opts "Open" },
        ["v"] = { api.node.open.vertical, opts "Open: Vertical Split" },
        ["h"] = { api.node.navigate.parent_close, opts "Close Directory" },
        ["C"] = { api.tree.change_root_to_node, opts "CD" },
    }
    -- load_mode("n", useful_keys)
    for key, val in pairs(useful_keys) do
        vim.keymap.set("n", key, val[1], val[2])
    end
end
M.config = {
    active = true,
    on_config_done = nil,
    setup = {
        experimental = {},
        auto_reload_on_write = false,
        disable_netrw = true,
        hijack_cursor = false,
        hijack_netrw = true,
        hijack_unnamed_buffer_when_opening = false,
        sort_by = "name",
        sort = {
            sorter = "name",
            folders_first = true,
            files_first = false,
        },
        root_dirs = {},
        prefer_startup_root = true,
        sync_root_with_cwd = true,
        reload_on_bufenter = true,
        respect_buf_cwd = true,
        on_attach = "default",
        select_prompts = true,
        view = {
            adaptive_size = false,
            centralize_selection = true,
            width = 30,
            cursorline = true,
            debounce_delay = 15,
            side = "left",
            preserve_window_proportions = false,
            number = false,
            relativenumber = false,
            signcolumn = "yes",
            float = {
                enable = false,
                quit_on_focus_loss = true,
                open_win_config = {
                    relative = "editor",
                    border = "rounded",
                    width = 30,
                    height = 30,
                    row = 1,
                    col = 1,
                },
            },
        },
        renderer = {
            add_trailing = false,
            group_empty = true,
            highlight_git = "name",
            highlight_opened_files = "none",
            root_folder_label = ":t",
            full_name = false,
            indent_width = 2,
            special_files = { "Cargo.toml", "Makefile", "README.md", "readme.md" },
            symlink_destination = true,
            highlight_diagnostics = "none",
            highlight_modified = "none",
            highlight_bookmarks = "none",
            highlight_clipboard = "name",
            indent_markers = {
                enable = false,
                inline_arrows = true,
                icons = {
                    corner = "└",
                    edge = "│",
                    item = "│",
                    none = " ",
                },
            },
            icons = {
                webdev_colors = icons.use_icons,
                git_placement = "before",
                padding = " ",
                symlink_arrow = " ➛ ",
                show = {
                    file = icons.use_icons,
                    folder = icons.use_icons,
                    folder_arrow = icons.use_icons,
                    git = icons.use_icons,
                    modified = icons.use_icons,
                    diagnostics = icons.use_icons,
                    bookmarks = icons.use_icons,
                },
                glyphs = {
                    default = icons.ui.Text,
                    symlink = icons.ui.FileSymlink,
                    bookmark = icons.ui.BookMark,
                    modified = icons.ui.Circle,
                    folder = {
                        arrow_closed = icons.ui.TriangleShortArrowRight,
                        arrow_open = icons.ui.TriangleShortArrowDown,
                        default = icons.ui.Folder,
                        open = icons.ui.FolderOpen,
                        empty = icons.ui.EmptyFolder,
                        empty_open = icons.ui.EmptyFolderOpen,
                        symlink = icons.ui.FolderSymlink,
                        symlink_open = icons.ui.FolderOpen,
                    },
                    git = {
                        unstaged = icons.git.FileUnstaged,
                        staged = icons.git.FileStaged,
                        unmerged = icons.git.FileUnmerged,
                        renamed = icons.git.FileRenamed,
                        untracked = icons.git.FileUntracked,
                        deleted = icons.git.FileDeleted,
                        ignored = icons.git.FileIgnored,
                    },
                },
            },
            -- special_files = { "Cargo.toml", "Makefile", "README.md", "readme.md" },
            -- symlink_destination = true,
        },
        hijack_directories = {
            enable = false,
            auto_open = true,
        },
        update_focused_file = {
            enable = true,
            debounce_delay = 15,
            -- update_cmd = true,
            update_root = {
                enable = true,
                ignore_list = {},
            },
            exclude = false,
        },
        diagnostics = {
            enable = icons.use_icons,
            show_on_dirs = false,
            show_on_open_dirs = true,
            debounce_delay = 50,
            severity = {
                min = vim.diagnostic.severity.HINT,
                max = vim.diagnostic.severity.ERROR,
            },
            icons = {
                hint = icons.diagnostics.BoldHint,
                info = icons.diagnostics.BoldInformation,
                warning = icons.diagnostics.BoldWarning,
                error = icons.diagnostics.BoldError,
            },
        },
        filters = {
            enable = true,
            dotfiles = false,
            git_clean = false,
            git_ignored = false,
            no_bookmark = false,
            no_buffer = false,
            custom = { "node_modules", "\\.cache" },
            exclude = {},
        },
        filesystem_watchers = {
            enable = true,
            debounce_delay = 50,
            ignore_dirs = {},
        },
        git = {
            enable = true,
            ignore = false,
            show_on_dirs = true,
            show_on_open_dirs = true,
            disable_for_dirs = {},
            timeout = 200,
            cygwin_support = false,
        },
        actions = {
            use_system_clipboard = true,
            change_dir = {
                enable = true,
                global = false,
                restrict_above_cwd = false,
            },
            expand_all = {
                max_folder_discovery = 300,
                exclude = {},
            },
            file_popup = {
                open_win_config = {
                    col = 1,
                    row = 1,
                    relative = "cursor",
                    border = "shadow",
                    style = "minimal",
                },
            },
            open_file = {
                quit_on_open = false,
                eject = true,
                resize_window = false,
                window_picker = {
                    enable = true,
                    picker = "default",
                    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
                    exclude = {
                        filetype = { "notify", "lazy", "qf", "diff", "fugitive", "fugitiveblame" },
                        buftype = { "nofile", "terminal", "help" },
                    },
                },
            },
            remove_file = {
                close_window = true,
            },
        },
        trash = {
            cmd = "gio trash",
            require_confirm = true,
        },
        live_filter = {
            prefix = "[FILTER]: ",
            always_show_folders = true,
        },
        tab = {
            sync = {
                open = false,
                close = false,
                ignore = {},
            },
        },
        notify = {
            threshold = vim.log.levels.INFO,
            absolute_path = true,
        },
        ui = {
            confirm = {
                remove = true,
                trash = true,
                default_yes = false,
            },
        },
        modified = {
            enable = true,
            show_on_dirs = true,
            show_on_open_dirs = true,
        },
        help = {
            sort_by = "key",
        },
        log = {
            enable = false,
            truncate = false,
            types = {
                all = false,
                config = false,
                copy_paste = false,
                dev = false,
                diagnostics = false,
                git = false,
                profile = false,
                watcher = false,
            },
        },
        system_open = {
            cmd = nil,
            args = {},
        },
    },
}

function M.setup()
    local status_ok, nvim_tree = pcall(require, "nvim-tree")

    if not status_ok then return end

    if M.config.active == false then return end

    if M.config.setup.on_attach == "default" then M.config.setup.on_attach = my_on_attach end
    nvim_tree.setup(M.config.setup)
end

return {
    { "nvim-neo-tree/neo-tree.nvim", enable = false },
    {
        "nvim-tree/nvim-tree.lua",
        config = M.setup,
        keys = {
            { "n", "<Leader>e", ":NvimTreeToggle<CR>", desc = "Toggle NvimTree" },
        },
        cmd = { "NvimTreeToggle", "NvimTreeOpen", "NvimTreeClose", "NvimTreeFocus" },
    },
}
